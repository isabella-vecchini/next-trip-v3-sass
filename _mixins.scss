/*mixins*/

//Typescale mixin, the : with value means that, if the variable is not speicified, the default is applied*/
@mixin responsive-typography($font-key, $weight: normal, $color: inherit) {
    font-size: map-get(map-get($font-sizes, $font-key), mobile); // Mobile size
    font-weight: $weight;
    color: $color;
  
    @media (min-width: 768px) { // Desktop size
      font-size: map-get(map-get($font-sizes, $font-key), desktop);
    }
  }

// Spacing mixin
  @mixin responsive-spacing($size-key, $property: margin) {
    #{$property}: map-get(map-get($spacing, $size-key), mobile); // Mobile size
  
    @media (min-width: 768px) {
      #{$property}: map-get(map-get($spacing, $size-key), desktop); // Desktop size
    }
  }

 
/* buttons styling using pseudoclasses for states*/
@mixin button(
  $background: transparent, // Defaults to transparent for no background
  $color: inherit,          // Defaults to inheriting text color
  $padding: 8px 16px,       // Defaults padding
  $border-radius: 4px,      // Defaults border radius
  $font-size: 16px,         // Defaults font size
  $text-decoration: none    // Defaults to no text decoration
) {
  border: none;
  cursor: pointer;
  background: $background;  // Valid background value
  color: $color;            // Valid text color
  font-size: $font-size;    // Font size for button text
  border-radius: $border-radius; // Rounded corners
  padding: $padding;        // Internal spacing
  text-decoration: $text-decoration; // For text style
  transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out; // transition effect for hover and focus changes

  &:hover {
    opacity: 0.9; // Slight dimming on hover
    transform: scale(1.03); //and slightly larger
  }

  &:focus {
    outline: 2px solid lighten($background, 20%); // Focus outline
    transform: scale(1.03); //and slightly larger
  }
}
